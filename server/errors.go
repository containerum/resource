package server

import (
	"fmt"
)

type (
	// Generic error type reported by resource-service.
	Err struct {
		Cause   error
		ErrCode string
		errStr  string
	}

	// Unhandled error caused by another service.
	OtherServiceError struct {
		Err
	}

	// Insufficient access error.
	PermissionError struct {
		Err
	}

	// Invalid input error.
	BadInputError struct {
		Err
	}

	// Unhandled error generated by database/sql package.
	// For internal use only.
	dbError struct {
		Err
	}
)

var (
	ErrNoSuchResource = Err{
		ErrCode: "NO_SUCH_RESOURCE",
		errStr:  "no such resource",
	}
	ErrAlreadyExists = Err{
		ErrCode: "ALREADY_EXISTS",
		errStr:  "already exists",
	}
	ErrDenied = PermissionError{
		Err: Err{
			ErrCode: "PERMISSION_DENIED",
			errStr:  "denied",
		},
	}
)

func newError(f string, args ...interface{}) Err {
	return Err{
		errStr: fmt.Sprintf(f, args...),
	}
}

func (e Err) Error() string {
	return e.errStr
}

func newOtherServiceError(f string, args ...interface{}) OtherServiceError {
	return OtherServiceError{newError(f, args...)}
}

func newPermissionError(f string, args ...interface{}) PermissionError {
	return PermissionError{newError(f, args...)}
}

func newBadInputError(f string, args ...interface{}) BadInputError {
	return BadInputError{newError(f, args...)}
}

func newDBError(f string, args ...interface{}) dbError {
	return dbError{newError(f, args...)}
}

func dbErrorWrap(cause error) error {
	switch cause.(type) {
	case Err, dbError, PermissionError, BadInputError:
		return cause
	default:
		return dbError{Err{
			cause,
			"INTERNAL",
			cause.Error(),
		}}
	}
}
