package server

import (
	"git.containerum.net/ch/json-types/errors"
)

type (

	// Unhandled error caused by another service.
	OtherServiceError struct {
		e *errors.Error
	}

	// Insufficient access error.
	PermissionError struct {
		e *errors.Error
	}

	// Invalid input error.
	BadInputError struct {
		e *errors.Error
	}

	// Unhandled error generated by database/sql package.
	// For internal use only.
	dbError struct {
		e *errors.Error
	}
)

func (oe *OtherServiceError) Error() string {
	return oe.e.Error()
}

func (pe *PermissionError) Error() string {
	return pe.e.Error()
}

func (be *BadInputError) Error() string {
	return be.e.Error()
}

func (de *dbError) Error() string {
	return de.e.Error()
}

var (
	ErrNoSuchResource = errors.New("no such resource")
	ErrAlreadyExists  = errors.New("already exists")
	ErrDenied         = errors.New("permisson denied")
)

func newError(f string, args ...interface{}) *errors.Error {
	return errors.Format(f, args...)
}

func newOtherServiceError(f string, args ...interface{}) *OtherServiceError {
	return &OtherServiceError{e: newError(f, args...)}
}

func newPermissionError(f string, args ...interface{}) *PermissionError {
	return &PermissionError{e: newError(f, args...)}
}

func newBadInputError(f string, args ...interface{}) *BadInputError {
	return &BadInputError{e: newError(f, args...)}
}

func newDBError(f string, args ...interface{}) *dbError {
	return &dbError{e: newError(f, args...)}
}

func dbErrorWrap(cause error) error {
	switch cause.(type) {
	case *errors.Error, *dbError, *PermissionError, *BadInputError:
		return cause
	default:
		return &dbError{errors.Format("db error caused by: %v", cause)}
	}
}
